# -*- coding: utf-8 -*-
"""heartDisease_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EqY9XjsOCoPUcKwmnpL9yEKjfUBl9_ox
"""

import pandas as pd
import matplotlib.pyplot as plt

"""# Loading the data"""

df=pd.read_csv('processed.cleveland.csv')

df.head()

"""Naming the columns"""

df.columns = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope','ca','thal','num']
df.head()

"""# Exploratory analysis"""

df.shape

df.groupby('num').describe()

"""In the last column 0 means absence of heart disease and 1-4  means presence of heart disease"""

df['num'] = df.num.map({0: 0, 1: 1, 2: 1, 3: 1, 4: 1})

df.head(303)

"""#  Visualizing the data"""

count=pd.value_counts(df['num'], sort= True)
count.plot(kind = 'bar',color = ["orange","green"])
plt.title('Bar Plot')
plt.show();

"""# Data pre-processing and splitting"""

import regex
df=df.replace(r'\?',float('NaN'),regex=True)

X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

"""Replacing values that have NaN with median of their repective colums"""

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(strategy="median")
imputer.fit(X[:,11:13])

X[:,11:13]=imputer.transform(X[:,11:13])
X

"""# Splitting of data
Train : Test ratio is 80:20
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""# Naive Bayes"""

from sklearn.naive_bayes import MultinomialNB
nb = MultinomialNB()
nb.fit(X_train, y_train)
y_pred = nb.predict(X_test)

"""# Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n",cm)

"""# Accuaracy score"""

print("\nAccuracy Score:")
accuracy_score(y_test, y_pred)

"""# Graph out of Confusion matrix"""

import seaborn as sns
sns.heatmap(cm, annot = True, fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Actual')